{"version":3,"sources":["app.js"],"names":["ViewModel","self","locationFilter","ko","observable","locations","observableArray","filteredLocations","filteredVisible","menuVisible","filter","Splash","enable","query","toLowerCase","$","each","index","location","locationName","name","marker","setVisible","indexOf","toggle","push","stopLoading","openInfo","google","maps","event","trigger","toggleMenu","vm"],"mappings":";;AAAA;;;;AAIA,IAAIA,YAAY,SAAZA,SAAY,GAAW;AACzB,MAAIC,OAAO,IAAX;;AAEAA,OAAKC,cAAL,GAAsBC,GAAGC,UAAH,EAAtB;AACAH,OAAKI,SAAL,GAAiBF,GAAGG,eAAH,CAAmB,EAAnB,CAAjB;AACAL,OAAKM,iBAAL,GAAyBJ,GAAGG,eAAH,CAAmB,EAAnB,CAAzB;AACAL,OAAKO,eAAL,GAAuBL,GAAGC,UAAH,CAAc,KAAd,CAAvB;AACAH,OAAKQ,WAAL,GAAmBN,GAAGC,UAAH,CAAc,KAAd,CAAnB;;AAEA;AACAH,OAAKS,MAAL,GAAc,YAAW;AACvBC,WAAOC,MAAP,CAAc,UAAd;;AAEA;AACAX,SAAKM,iBAAL,CAAuB,EAAvB;;AAEA,QAAIM,QAAQZ,KAAKC,cAAL,GAAsBY,WAAtB,EAAZ;AACAC,MAAEC,IAAF,CAAOf,KAAKI,SAAL,EAAP,EAAyB,UAASY,KAAT,EAAgBC,QAAhB,EAA0B;AACjD,UAAIC,eAAeD,SAASE,IAAT,CAAcN,WAAd,EAAnB;AACA,UAAID,UAAU,EAAd,EAAkB;AAChBK,iBAASG,MAAT,CAAgBC,UAAhB,CAA2B,IAA3B;AACD,OAFD,MAEO,IAAIH,aAAaI,OAAb,CAAqBV,KAArB,KAA+B,CAAnC,EAAsC;AAC3CZ,aAAKuB,MAAL;AACAvB,aAAKM,iBAAL,CAAuBkB,IAAvB,CAA4BP,QAA5B;AACD,OAHM,MAGA;AACLA,iBAASG,MAAT,CAAgBC,UAAhB,CAA2B,KAA3B;AACD;AACDI;AACD,KAXD;AAaD,GApBD;;AAsBA;AACAzB,OAAK0B,QAAL,GAAgB,YAAW;AACzB1B,SAAKuB,MAAL;AACAb,WAAOC,MAAP,CAAc,UAAd;AACAgB,WAAOC,IAAP,CAAYC,KAAZ,CAAkBC,OAAlB,CAA0B,KAAKV,MAA/B,EAAuC,OAAvC;AACAK;AACD,GALD;;AAOA;AACAzB,OAAKuB,MAAL,GAAc,YAAW;AACvB,QAAIvB,KAAKQ,WAAL,EAAJ,EAAwB;AACtBR,WAAK+B,UAAL;AACD;AACD/B,SAAKO,eAAL,CAAqB,CAACP,KAAKO,eAAL,EAAtB;AACD,GALD;;AAOA;AACAP,OAAK+B,UAAL,GAAkB,YAAW;AAC3B,QAAI/B,KAAKO,eAAL,EAAJ,EAA4B;AAC1BP,WAAKuB,MAAL;AACD;AACDvB,SAAKQ,WAAL,CAAiB,CAACR,KAAKQ,WAAL,EAAlB;AACD,GALD;AAOD,CAxDD;;AA0DA,IAAIwB,KAAK,IAAIjC,SAAJ,EAAT","file":"app.js","sourcesContent":["/*\n  The bridge between the client and client-services\n*/\n\nvar ViewModel = function() {\n  var self = this;\n\n  self.locationFilter = ko.observable();\n  self.locations = ko.observableArray([]);\n  self.filteredLocations = ko.observableArray([]);\n  self.filteredVisible = ko.observable(false);\n  self.menuVisible = ko.observable(false);\n\n  // Filters the map with locations matching the filter applied\n  self.filter = function() {\n    Splash.enable('circular');\n\n    // clear previously set filtered locatoins\n    self.filteredLocations([]);\n\n    var query = self.locationFilter().toLowerCase();\n    $.each(self.locations(), function(index, location) {\n      var locationName = location.name.toLowerCase();\n      if (query === '') {\n        location.marker.setVisible(true);\n      } else if (locationName.indexOf(query) >= 0) {\n        self.toggle();\n        self.filteredLocations.push(location);\n      } else {\n        location.marker.setVisible(false);\n      }\n      stopLoading();\n    });\n\n  };\n\n  // Opens the info window\n  self.openInfo = function() {\n    self.toggle();\n    Splash.enable('circular');\n    google.maps.event.trigger(this.marker, 'click');\n    stopLoading();\n  };\n\n  // Displays the filtered locations\n  self.toggle = function() {\n    if (self.menuVisible()) {\n      self.toggleMenu();\n    }\n    self.filteredVisible(!self.filteredVisible());\n  };\n\n  // Displays all the locations\n  self.toggleMenu = function() {\n    if (self.filteredVisible()) {\n      self.toggle();\n    }\n    self.menuVisible(!self.menuVisible());\n  };\n\n};\n\nvar vm = new ViewModel();\n"]}